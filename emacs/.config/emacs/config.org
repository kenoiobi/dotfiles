#+title: Kayon's Emacs Config
#+author: Kayon Jaime (kenoiobi)
#+STARTUP: showeverything
#+options: toc:2

* TABLE OF CONTENTS :toc:
- [[#getting-started][GETTING STARTED]]
  - [[#melpa][MELPA]]
  - [[#custom][CUSTOM]]
- [[#removing-bad-default-behavior][REMOVING BAD DEFAULT BEHAVIOR]]
- [[#evil][EVIL]]
  - [[#install][INSTALL]]
  - [[#keybindings][KEYBINDINGS]]
- [[#moving-between-files][MOVING BETWEEN FILES]]
  - [[#dired][DIRED]]
  - [[#buffers][BUFFERS]]
  - [[#fzf][FZF]]
  - [[#zoxide][ZOXIDE]]
  - [[#bookmarks][BOOKMARKS]]
  - [[#harpoon][HARPOON]]
- [[#moving-inside-files][MOVING INSIDE FILES]]
  - [[#avy][AVY]]
- [[#taking-notes][TAKING NOTES]]
- [[#project][PROJECT]]
  - [[#projectile][PROJECTILE]]
  - [[#perspective][PERSPECTIVE]]
- [[#lsp][LSP]]
  - [[#java][Java]]
  - [[#javascript][Javascript]]
  - [[#python][Python]]
  - [[#php][PHP]]
  - [[#go][Go]]
  - [[#completion][COMPLETION]]
  - [[#linting][LINTING]]
  - [[#goto-references][Goto References]]
  - [[#show-methods-in-tree-view][Show Methods in Tree View]]
- [[#git][GIT]]
- [[#aesthetics][AESTHETICS]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
  - [[#nerd-icons][Nerd Icons]]
- [[#extra-stuff][EXTRA STUFF]]
  - [[#splits][SPLITS]]
  - [[#pdf][PDF]]
  - [[#snippets][SNIPPETS]]
  - [[#formatter][FORMATTER]]
  - [[#terminal][TERMINAL]]
  - [[#electric-pairs][ELECTRIC PAIRS]]
  - [[#line-numbers][LINE NUMBERS]]
  - [[#indent-lines][INDENT LINES]]
  - [[#syntax-highlighting][SYNTAX HIGHLIGHTING]]
  - [[#org-configs][ORG CONFIGS]]
  - [[#undo-tree][UNDO TREE]]
  - [[#server][SERVER]]
  - [[#exec-path-from-shell][EXEC PATH FROM SHELL]]
  - [[#http-client][HTTP CLIENT]]
  - [[#sudo-edit][SUDO EDIT]]
- [[#credits][CREDITS]]

* GETTING STARTED

** MELPA

I tend to use the default package manager, this is just to setup melpa (non official packages)
#+begin_src emacs-lisp :tangle yes
  (setq package-archives
	'(("gnu" . "https://elpa.gnu.org/packages/")
	("nongnu" . "https://elpa.nongnu.org/nongnu/")
	("melpa" . "https://melpa.org/packages/")))

 (package-refresh-contents)
#+end_src

** CUSTOM

I dont like custom files being created by themselves, so i contain them on a temp file

#+begin_src emacs-lisp :tangle yes
  (setq custom-file (make-temp-file "emacs-custom"))
#+end_src



* REMOVING BAD DEFAULT BEHAVIOR

1. I like sh more than make, so change that

   #+begin_src emacs-lisp :tangle yes
     (setq compile-command "./build.sh")
   #+end_src
   
2. Emacs has a ton of bars everywhere, remove em all
   
   #+begin_src emacs-lisp :tangle yes
     (tool-bar-mode -1)
     (scroll-bar-mode 0)
     (menu-bar-mode 0)
   #+end_src

3. I dont like the start screen

   #+begin_src emacs-lisp :tangle yes
     (setq inhibit-startup-screen t)
     (setq initial-scratch-message nil)
   #+end_src

4. I dont like percentages on my modeline

   #+begin_src emacs-lisp :tangle yes
     (setq mode-line-percent-position nil)
   #+end_src

5. To me, its expected behavior for your cursor to focus a newly open split, not staying where it is

   #+begin_src emacs-lisp :tangle yes
     (global-set-key "\C-x2" (lambda () (interactive)(split-window-vertically) (other-window 1)))
     (global-set-key "\C-x3" (lambda () (interactive)(split-window-horizontally) (other-window 1)))
     (global-set-key "\C-x=" 'balance-windows)
     (global-set-key "\C-x-" (lambda () (interactive) (shrink-window 5)))
   #+end_src
   
* EVIL
** INSTALL

Evil is the center to my whole config, so we set it up first and set the rest accordingly

#+begin_src emacs-lisp :tangle yes
(package-install 'evil)
(package-install 'evil-numbers) ;; for using numbers inside macros
(package-install 'evil-collection) ;; evil everywhere
(package-install 'evil-org) ;; evil on org mode duh
#+end_src

Its config is a bit weird because of evil-collection, but works out
#+begin_src emacs-lisp :tangle yes
    ;; i use space as leader, if this is not setup, it works badly
    (setq evil-collection-key-blacklist '("\"SPC\""))
    (setq evil-mode-line-format nil) ;; evil collection complains if these two aren't set
    (setq evil-want-keybinding nil)

    ;; it all needs to be done in this order
    (evil-mode t)
    (setq evil-collection-key-blacklist '("SPC")) ;; twice cuz unsure where it should go, works fine like this
    ;; enabling ctrl-r on evil
    (evil-set-undo-system 'undo-redo)
    (evil-collection-init)

    (add-hook 'org-mode-hook                                                                      
		(lambda ()                                                                          
	    (define-key evil-normal-state-map (kbd "TAB") 'org-cycle))) 

    ;; leader key
    (evil-set-leader 'normal (kbd "SPC"))
    (evil-set-leader 'visual (kbd "SPC"))
#+end_src


** KEYBINDINGS
Initially, lets configure some default emacs behavior, then we'll mess with packages

*** Base Emacs
#+begin_src emacs-lisp :tangle yes
  (global-set-key [f3] 'compile) ;; really like to compile like this
  (global-set-key (kbd "C-;") 'comment-line) ;; amazing, makes commenting easy
  (global-set-key (kbd "C-/") 'comment-line) ;; amazing, makes commenting easy
#+end_src


*** Evil

#+begin_src emacs-lisp :tangle yes
  (evil-define-key 'normal 'global (kbd "|") 'async-shell-command) ;; really nice, love it, should be in default vim
  (evil-define-key 'normal 'global (kbd "gb") 'xref-go-back) ;; dumb jump

  (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)

  (define-key evil-insert-state-map (kbd "C-p") 'previous-line)
  (define-key evil-insert-state-map (kbd "C-n") 'next-line)
  (define-key evil-insert-state-map (kbd "C-a") 'move-beginning-of-line)
  (define-key evil-insert-state-map (kbd "C-e") 'move-end-of-line)
  (define-key evil-normal-state-map (kbd "C-w") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C-S-w") 'evil-numbers/dec-at-pt)


  ;; movement keys with shift
  (evil-define-key 'normal 'global (kbd "J") (lambda () (interactive)
  					      (evil-next-line 5)
  						  ))
  (evil-define-key 'normal 'global (kbd "K") (lambda () (interactive)
  					      (evil-previous-line 5)
  						  ))

  (evil-define-key 'visual 'global (kbd "J") (lambda () (interactive)
  					      (evil-next-line 5)
  						  ))
  (evil-define-key 'visual 'global (kbd "K") (lambda () (interactive)
  					      (evil-previous-line 5)
  						  ))

  (define-key visual-line-mode-map (kbd "J") (lambda () (interactive)
  					      (evil-next-line 5)
  						  ))
  (define-key visual-line-mode-map (kbd "K") (lambda () (interactive)
  					      (evil-previous-line 5)
  						  ))
#+end_src


* MOVING BETWEEN FILES

** DIRED

I like to use dired not as a file explorer for my text editor, but as a full blown
file explorer, better than most GUI ones

That means two things:

First, it should do some stuff well, better than default dired does

*** Better Than GUI

1. Open easily

  I deal with this by setting a single key for find file

  #+begin_src emacs-lisp :tangle yes
    (evil-define-key 'normal 'global (kbd "<leader>e") 'find-file)
  #+end_src
2. Bookmarks (Downloads, home)

  I deal with this one with zoxide and GH mapping

  #+begin_src emacs-lisp :tangle yes
    (evil-define-key 'normal 'global (kbd "gh") (lambda () (interactive)
    					      (find-file "~/")))
  #+end_src

3. Moving/Copying easily

  I do this in a cool way, after doing a split, this config makes it so emacs defaults
  any action to the next open window

  #+begin_src emacs-lisp :tangle yes
    (setq dired-dwim-target t)
  #+end_src

  This means that, when you split and C (copy), if you press enter, it goes to the
  location that the other split is at, very nice, works for other things as well

4. Subtrees
   
   Simple plugin and mapping to show subtrees

   #+begin_src emacs-lisp :tangle yes
    (package-install 'dired-subtree)
    (evil-define-key 'normal dired-mode-map (kbd "TAB") 'dired-subtree-toggle)
   #+end_src

5. Easy movimentation
   
   I like to go in and out of directories easily, so i map H and L to it

   #+begin_src emacs-lisp :tangle yes
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-find-file)
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
   #+end_src



Second, some default configs must be changed so that dired feels better to use

*** Setting up Defaults
Firstly, Dired looks bad by default, lets fix that:

#+begin_src emacs-lisp :tangle yes
  (setq dired-listing-switches "-goAht --group-directories-first")
#+end_src

Also, it has a bad habit of leaving tons of buffers open everywhere, this fixes it

#+begin_src emacs-lisp :tangle yes
  (setq dired-kill-when-opening-new-dired-buffer t)
#+end_src

I'm also setting it up to have details hidden by default

#+begin_src emacs-lisp :tangle yes
  (add-hook 'dired-mode-hook (lambda ()
  			     (dired-hide-details-mode)))
#+end_src

I don't like my files to be totally deleted when i delete them, this makes dired send it to system trash

#+begin_src emacs-lisp :tangle yes
  (setq delete-by-moving-to-trash t)
#+end_src



** BUFFERS
Buffers are really well made in emacs, i tend to move between them in some ways:

1. Prev/Next
   #+begin_src emacs-lisp :tangle yes
     (evil-define-key 'normal 'global (kbd "<leader>,") 'previous-buffer)
     (evil-define-key 'normal 'global (kbd "<leader>.") 'next-buffer)
   #+end_src

2. Easy access to buffer listing
   #+begin_src emacs-lisp :tangle yes
     (evil-define-key 'normal 'global (kbd "<leader>a") 'switch-to-buffer)
   #+end_src

3. Easy killing
   #+begin_src emacs-lisp :tangle yes
     (evil-define-key 'normal 'global (kbd "<leader>k") 'kill-buffer)
   #+end_src


** FZF
FZF is a TUI tool for selecting stuff, one of the best ever made, i'm madly in love with it

First, we install it
#+begin_src emacs-lisp :tangle yes
  (package-install 'fzf)
  (require 'fzf) ;; not sure if necessary
#+end_src

Then, we set it to find:

Files
#+begin_src emacs-lisp :tangle yes
  (evil-define-key 'normal 'global (kbd "<leader>f") (lambda () (interactive)
						      (fzf-with-command "find -type f" 'fzf--action-find-file default-directory)))
#+end_src

Directories
#+begin_src emacs-lisp :tangle yes
  ;; (evil-define-key 'normal 'global (kbd "<leader>d") (lambda () (interactive)
						      ;; (fzf-with-command "find -type d" 'fzf--action-find-file default-directory)))
#+end_src

Grep
#+begin_src emacs-lisp :tangle yes
(evil-define-key 'normal 'global (kbd "<leader>v") 'fzf-grep-with-narrowing)
;; alternative if you get mad with default implementation
;; (evil-define-key 'normal 'global (kbd "<leader>v") 'rgrep)
#+end_src


** ZOXIDE
Zoxide is a tool that remembers last visited directories and allows you to visit
them quickly, completely transforms the terminal experience, recommend it to everyone

*** Install
#+begin_src emacs-lisp :tangle yes
  (package-install 'zoxide)
  (require 'zoxide) ;; not sure if necessary
#+end_src


*** Setup
First, some hooks to add folders to zoxide with emacs
#+begin_src emacs-lisp :tangle yes
  (add-hook 'find-file-hook 'zoxide-add)
  (add-hook 'dired-mode-hook 'zoxide-add)
#+end_src

Then, we add a shortcut to access it, i like to do it with fzf
#+begin_src emacs-lisp :tangle yes
  (evil-define-key 'normal 'global (kbd "<leader>z") (lambda () (interactive)
						      (find-file "~/")
						      (fzf-with-command "zoxide query -l" 'find-file)))
#+end_src


** BOOKMARKS
I love doom emacs bookmarks, so i reimplemented them in my config

*** Vertico
Vertico is a substitute for default listings, making them look good and
more responsive, also nice substitute for helm (i think helm looks bad)

#+begin_src emacs-lisp :tangle yes
  (package-install 'vertico)
  (vertico-mode t)
#+end_src


*** Consult
Consult set ups some nice listing for things, i love its bookmark listing

#+begin_src emacs-lisp :tangle yes
  (package-install 'counsel)
  (evil-define-key 'normal 'global (kbd "<leader>RET") 'counsel-bookmark)
#+end_src

Necessary, dont remember why
#+begin_src emacs-lisp :tangle yes
  (setq bookmark-save-flag 1)
#+end_src


** HARPOON
If you've watched Primeagen before you know about this, move between some files with
simple fast keys, also able to edit the order and add new files easily

Installing
#+begin_src emacs-lisp :tangle yes
  (package-install 'harpoon)
#+end_src

Setting up config keys
#+begin_src emacs-lisp :tangle yes
  ;; adding files to list
  (global-set-key (kbd "C-s") 'harpoon-add-file)
  ;; browsing file listing, to change order, delete, etc
  (evil-define-key 'normal 'global (kbd "<leader>h") 'harpoon-toggle-file)
#+end_src

Setting up main keys for navigation
#+begin_src emacs-lisp :tangle yes
  (evil-define-key 'normal 'global (kbd "<leader>1") 'harpoon-go-to-1)
  (evil-define-key 'normal 'global (kbd "<leader>2") 'harpoon-go-to-2)
  (evil-define-key 'normal 'global (kbd "<leader>3") 'harpoon-go-to-3)
  (evil-define-key 'normal 'global (kbd "<leader>4") 'harpoon-go-to-4)
  (evil-define-key 'normal 'global (kbd "<leader>5") 'harpoon-go-to-5)
  (evil-define-key 'normal 'global (kbd "<leader>6") 'harpoon-go-to-6)
  (evil-define-key 'normal 'global (kbd "<leader>7") 'harpoon-go-to-7)
  (evil-define-key 'normal 'global (kbd "<leader>8") 'harpoon-go-to-8)
  (evil-define-key 'normal 'global (kbd "<leader>9") 'harpoon-go-to-9)
#+end_src


* MOVING INSIDE FILES

** AVY

Avy is similar to vimium on browsers, if you're lazy to use your mouse, use this instead

#+begin_src emacs-lisp :tangle yes
  (evil-define-key 'normal 'global (kbd "C-f") 'avy-goto-char)
#+end_src


* TAKING NOTES

After a lot of tinkering, i found that the best way to note take would be something with
the following characteristics:

1. Easily accessible

   Achieved by using a simple shortcut to access it
   #+begin_src emacs-lisp :tangle yes
    (evil-define-key 'normal 'global (kbd "<leader>bs") 'scratch-buffer)
   #+end_src
   
2. Persistent

   Achieved by using Persistent Scratch

   #+begin_src emacs-lisp :tangle yes
     (package-install 'persistent-scratch)
     (persistent-scratch-setup-default)
     (persistent-scratch-autosave-mode 1)
     (setq persistent-scratch-backup-directory "~/.emacs.d/scratch/") ;; this is very important, dont forget it, otherwise your scratch might be pernamently lost
   #+end_src

3. Modular

   Achieved by using org mode on scratchpads
   
   #+begin_src emacs-lisp :tangle yes
    (setq initial-major-mode 'org-mode)
   #+end_src


* PROJECT
** PROJECTILE
Projectile is a project manager tool, you can add projects, jump between them, manage them, etc


Install
#+begin_src emacs-lisp :tangle yes
  (package-install 'projectile)
#+end_src

Keybindings
#+begin_src emacs-lisp :tangle yes
  (evil-define-key 'normal 'global (kbd "<leader>SPC") 'projectile-find-file)
#+end_src

** PERSPECTIVE
Perspective is workspaces implemented in emacs, one of the best
i've ever used

Installation

#+begin_src emacs-lisp :tangle yes
  (package-install 'perspective)
  (setq persp-mode-prefix-key (kbd "C-'")) ;; not used, just set to make persp stop complaining

  (persp-mode t)
#+end_src

My setup

#+begin_src emacs-lisp :tangle yes
  (evil-define-key 'normal 'global (kbd "C-t") 'persp-switch)

  ;; next and prev
  (evil-define-key 'normal 'global (kbd "C-<prior>") 'persp-prev)
  (evil-define-key 'normal 'global (kbd "C-<next>") 'persp-next)

  ;; since i dont use tabs, quick switching with gt
  (define-key evil-normal-state-map (kbd "gt") 'persp-switch-last)
#+end_src

Also, general managing of workspaces

#+begin_src emacs-lisp :tangle yes
  (evil-define-key 'normal 'global (kbd "<leader>wk") 'persp-kill)
  (evil-define-key 'normal 'global (kbd "<leader>wr") 'persp-rename)
  (evil-define-key 'normal 'global (kbd "<leader>ws") (lambda () (interactive)
						      (persp-state-save "~/.emacs.d/persp")
						      )
    )
  (evil-define-key 'normal 'global (kbd "<leader>wl") (lambda () (interactive)
						      (persp-state-load "~/.emacs.d/persp")
						      )
    )
#+end_src


* LSP

The general setup for an LSP happens as follows:

1. lsp
2. mode (treesitter)
3. completion (company)
4. linting (flycheck)
5. snippets (optional)

each language has their own modes (or multiple, js) and lsp servers
to make use of lsp-mode, company and flycheck

lsp's config goes like this:

#+begin_src emacs-lisp :tangle yes
  (package-install 'lsp-mode)
#+end_src

then, we hook it to the mode that will be used

so, first i'll do configuration for each language

** Java

Default java mode is really good, but lsp implementation needs some
work

#+begin_src emacs-lisp :tangle yes
  (package-install 'lsp-java)
  (add-hook 'java-mode-hook 'lsp-mode)
  (global-set-key [f10] 'lsp-execute-code-action)
  (global-set-key [f9] 'lsp-workspace-restart)
#+end_src


** Javascript
Javascript is a difficult beast to figure out, there are tons of
modes and different technologies, like:

1. pure
2. jsx
3. ts
4. tsx

some modes does good stuff for react, but break for typescript, vice
versa, yada yada, i'm still experimenting with these but at the moment
i am satisfied with these options

#+begin_src emacs-lisp :tangle yes
  (package-install 'rjsx-mode)

  (package-install 'jtsx) ;; IMPORTANT!! do M-x jtsx-install-treesit-language for it to work
  (package-install 'typescript-mode)
  (add-to-list 'auto-mode-alist '("\\.js\\'" . jtsx-jsx-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))

  ;; (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
  ;; (add-to-list 'auto-mode-alist '("\\.tsx\\'" . jtsx-tsx-mode))

  ;; (setq js-indent-level 2)
#+end_src

and then, hook to lsp

#+begin_src emacs-lisp :tangle yes
  (add-hook 'rjsx-mode-hook 'lsp)
  (add-hook 'jtsx-tsx-mode-hook 'lsp)
  (add-hook 'typescript-mode-hook 'lsp)
#+end_src

Also, prettier, if you're into that

#+begin_src emacs-lisp :tangle yes
  (package-install 'prettier-js)
  (add-to-list 'auto-mode-alist '("\\.js\\'"  . prettier-js-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . prettier-js-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'"  . prettier-js-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . prettier-js-mode))
#+end_src

** Python

Python is an interesting beast to handle

First of all, its lsps are generally not found on packages, but inside
python's pip itself, so we need Emacs to use the lsp from inside a
virtual enviroment

We do that by using direnv

Direnv is a tool used on terminal for auto activation and deactivation
of virtual enviroments, we first need to implement this inside emacs
and then install our servers accordingly

#+begin_src emacs-lisp :tangle yes
  (package-install 'envrc)
  (package-install 'lsp-pyright)
  (envrc-global-mode t)
  (add-hook 'python-mode-hook (lambda ()
  			      (require 'lsp-pyright)
  			      (lsp-deferred)))
#+end_src

pyright is my lsp of choice, tho, for this setup to work, you need
to pip install pyright inside of your virtual enviroment

and, read a bit on how to use envrc, after it works for the terminal,
it will automatically work for Emacs as well



** PHP
PHP is quite a simple setup

#+begin_src emacs-lisp :tangle yes
  (package-install 'php-mode)
  (add-hook 'php-mode-hook 'lsp-mode)
#+end_src

** Go

Go is very difficult to setup, principally because it does not
like to follow conventions for path like every other language, you
need to add custom paths for its programs, something that its not
that easy to do in emacs

#+begin_src emacs-lisp :tangle yes
        (package-install 'go-mode)
        (add-hook 'go-mode-hook (lambda ()
    			      (setq tab-width 4)
  			      ))
#+end_src



** COMPLETION

Company is my completion engine of choice, its just a simple
plugin thatt, after you hook it, completes things for you

#+begin_src emacs-lisp :tangle yes
  (package-install 'company)
  (add-hook 'after-init-hook 'global-company-mode)

  ;; this completes after the first letter (default is 3)
  (setq company-minimum-prefix-length 1)
#+end_src

** LINTING

Linting is showing errors before compiling, generaly IDEs do this
while you're writing your code

For that, i like flycheck, it does just that, consults your lsp for
errors

#+begin_src emacs-lisp :tangle yes
  (package-install 'flycheck)
  (package-install 'flycheck-inline)
  (global-flycheck-mode +1)
  (add-hook 'flycheck-mode-hook #'flycheck-inline-mode)
#+end_src

** Goto References

A Nice thing from IDEs is the capacity to just go to the definition with a single
button, dumb jump is what i like to use to do this

#+begin_src emacs-lisp :tangle yes
  (package-install 'dumb-jump)
  (dumb-jump-mode t)
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  (evil-define-key 'normal 'global (kbd "gb") 'xref-go-back) ;; dumb jump
#+end_src

By default, it sets evil's GD, so we just need to setup the go back

** Show Methods in Tree View

When you're working with 1000+ lines, sometimes its nice to see the the methods
and classes in a tree view, so you're not as lost

For this i use treemacs

#+begin_src emacs-lisp :tangle yes
  (package-install 'treemacs)

  (setq treemacs-position 'right)
  (setq treemacs-width 50)

  (evil-define-key 'normal 'global (kbd "<leader>ss") 'lsp-treemacs-symbols)
  (evil-define-key 'normal 'global (kbd "<leader>sf") 'treemacs)
#+end_src


* GIT

Magit is so good that some people use Emacs just for it LOL

#+begin_src emacs-lisp :tangle yes
  (package-install 'magit)
  (evil-define-key 'normal 'global (kbd "<leader>gg") 'magit)
  (evil-define-key 'normal 'global (kbd "<leader>ga") 'magit-log-buffer-file)
  (evil-define-key 'normal 'global (kbd "<leader>n") 'magit-blob-previous)
  (evil-define-key 'normal 'global (kbd "<leader>m") 'magit-blob-next)
#+end_src


* AESTHETICS

** Theme


Love doom themes, generally use this one:

#+begin_src emacs-lisp :tangle yes
(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                  (load-theme 'modus-vivendi-deuteranopia t)))
              nil)
  (load-theme 'modus-vivendi-deuteranopia t))

#+end_src

This font size is really nice for 27 inch monitors

#+begin_src emacs-lisp :tangle yes
  (add-to-list 'default-frame-alist '(font . "Jetbrains Mono Nerd Font 16"))
#+end_src


** Modeline

I Also love the doom modeline

#+begin_src emacs-lisp :tangle yes
  (package-install 'doom-modeline)
  (doom-modeline-mode t)
#+end_src

I Like to have a clock on my modeline as well

#+begin_src emacs-lisp :tangle yes
  (setq display-time-24hr-format t)
  (setq display-time-default-load-average nil)
  (display-time-mode t)
#+end_src


** Nerd Icons

I like setting some nerd icons for dired, makes everything look nice

#+begin_src emacs-lisp :tangle yes
  (package-install 'nerd-icons-dired)
  (add-hook 'dired-mode-hook #'nerd-icons-dired-mode)
#+end_src


* EXTRA STUFF

** SPLITS

I absolutely adore splitting, use it all the time, even better on big monitors

But, i think that default keybindings for managing splits are bad, so i change them:

#+begin_src emacs-lisp :tangle yes
  (evil-define-key 'normal 'global (kbd "<leader>o") 'other-window)
  (evil-define-key 'normal 'global (kbd "<leader>i") 'delete-other-windows)
#+end_src


** PDF

PDFS on default Emacs suck, PDF Tools fixes this

#+begin_src emacs-lisp :tangle yes
  (package-install 'pdf-tools)
  (pdf-tools-install)
#+end_src


** SNIPPETS

Snippets is a must have, after you try it, you never go back

Also, this whole document was written using elisp_ snippet LOL

Installing:

#+begin_src emacs-lisp :tangle yes
  (package-install 'yasnippet)
  (package-install 'yasnippet-snippets)
  (package-install 'react-snippets)
#+end_src

Setting up:
#+begin_src emacs-lisp :tangle yes
  (yas-global-mode)
#+end_src



** FORMATTER

Formatting is the act of having software make your code look proper for you, mostly used on vscode with prettier

i like to use format-all and install the packages related to the language i'm working in

#+begin_src emacs-lisp :tangle yes
  (package-install 'format-all)
  (evil-define-key 'normal 'global (kbd "<leader>bf") 'format-all-buffer)
#+end_src

** TERMINAL

Just set leader t to eshell. You'll thank me later.

#+begin_src emacs-lisp :tangle yes
  (evil-define-key 'normal 'global (kbd "<leader>t") 'eshell)
#+end_src


** ELECTRIC PAIRS

Huge QOL improvement, duplicates quotes, parenthesis, etc

#+begin_src emacs-lisp :tangle yes
  (electric-pair-mode t)
#+end_src
  


** LINE NUMBERS

Like any Nice Republican American, i like my numbers Relative, like it should always be

#+begin_src emacs-lisp :tangle yes
  (line-number-mode 0)
  (setq display-line-numbers 'visual)
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
#+end_src


** INDENT LINES

Showing indent lines is an amazing thing for when you're inside
a gigantic if, no matter the language (python really likes this)

after considering lots of options, i've settled with indent-bars

#+begin_src emacs-lisp :tangle yes
  (package-install 'indent-bars)
  (setq indent-bars-starting-column 0)
  (add-hook 'prog-mode-hook 'indent-bars-mode)
#+end_src

This is the only option that does not depend on continous code
and works well with dark themes, heavily recommend this

Also, i like to see "lost whitespace" at end of lines and on blank lines, this shows it quite clearly

#+begin_src emacs-lisp :tangle yes
  (setq show-trailing-whitespace t)
#+end_src


** SYNTAX HIGHLIGHTING

Syntax highlighting is more for looks, but it can be nice to
help find things, wears out eyes a bit less

some people like tree sitter, i personally am a fan of rainbow identifiers

#+begin_src emacs-lisp :tangle yes
  (package-install 'rainbow-identifiers)
  (add-hook 'prog-mode-hook 'rainbow-identifiers-mode)
#+end_src

it basically turns each words hex into a color and colors it, simple
and i think it looks nice


** ORG CONFIGS

Using table of contents on org mode

#+begin_src emacs-lisp :tangle yes
  (package-install 'toc-org)
  (toc-org-enable)
  (add-hook 'org-mode-hook 'toc-org-enable)
#+end_src

#+begin_src emacs-lisp :tangle yes
  (setq org-export-with-broken-links t)
  (setq org-babel-min-lines-for-block-output 0)
#+end_src

** UNDO TREE
This packages allows for you to visuaIize your undos on a tree view, way better

#+begin_src emacs-lisp :tangle yes
  ;; (package-install 'undo-tree)
  ;; (global-undo-tree-mode)
  ;; (setq undo-tree-save-history t)
  ;; (setq undo-tree-history-alist '(("." . "~/.emacs.d/undo-tree")))
  ;; (add-hook 'after-save-hook (lambda () (undo-tree-save-history nil t)))
#+end_src
** SERVER
Some settings to make emacs on the terminal good
+ shortcuts for dealing with multiple frames (windows)

#+begin_src emacs-lisp :tangle yes
  (package-install 'xclip)
  (xclip-mode t)
  (evil-define-key 'normal 'global (kbd "<leader>d") 'select-frame-by-name)
#+end_src

** EXEC PATH FROM SHELL
This package makes emacs respect your terminal path

#+begin_src emacs-lisp :tangle yes
  (package-install 'exec-path-from-shell)
  (when (daemonp)
  (exec-path-from-shell-initialize))
#+end_src

** HTTP CLIENT
I'm using Verb

#+begin_src emacs-lisp :tangle yes
  (package-install 'verb)
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-c C-r") verb-command-map))
#+end_src

** SUDO EDIT
Sometimes, you want to edit some write protected files, to do that, you can use this minor mode
#+begin_src emacs-lisp :tangle yes
  (package-install 'auto-sudoedit)
  (auto-sudoedit-mode 1)
#+end_src


* CREDITS

This whole setup was learned (stolen) from DistroTube's Emacs series, this would not have been possible this soon without him, go give him some love

https://www.youtube.com/watch?v=d1fgypEiQkE&list=PL5--8gKSku15e8lXf7aLICFmAHQVo0KXX
